{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-messages\"\n};\nconst _hoisted_3 = {\n  class: \"chat-input\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: _normalizeClass({\n        'user-message': message.isUserMessage,\n        'bot-message': !message.isUserMessage\n      })\n    }, _toDisplayString(message.text), 3\n    /* TEXT, CLASS */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.inputText = $event),\n    onKeydown: _cache[1] || (_cache[1] = _withKeys((...args) => _ctx.sendMessage && _ctx.sendMessage(...args), [\"enter\"])),\n    placeholder: \"Type your message...\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, _ctx.inputText]])])]);\n}","map":{"version":3,"mappings":";;EACKA,KAAK,EAAC;;;EACFA,KAAK,EAAC;;;EAKNA,KAAK,EAAC;;;uBANfC,oBASQ,KATR,cASQ,CARJC,oBAIM,KAJN,cAIM,oBAHJD,oBAEME,SAFN,EAEM,IAFN,EAEMC,YAFiBC,aAEjB,EAFMC,OAAmB,IAAZ;yBAAnBL,oBAEM,KAFN,EAEM;MAF4BM,GAAG,EAAED,OAAO,CAACE,EAEzC;MAF8CR,KAAK;QAAA,gBAAoBM,OAAO,CAACG,aAA5B;QAAyC,gBAAkBH,OAAO,CAACG;MAAnE;IAEnD,CAFN,mBACKH,OAAO,CAACI,KADb,EACiB;IAAA;IADjB;GAEM,CAFN;;EAAA,CAGI,EAJN,CAQI,EAHJR,oBAEM,KAFN,cAEM,iBADJA,oBAA6F,OAA7F,EAA6F;+DAA7EG,iBAASM,OAAoE;IAAjEC,SAAO,mDAAQP,6CAAR,EAAmB,SAAnB,EAA0D;IAArCQ,WAAW,EAAC;EAAyB,CAA7F;;EAAA,kBAAgBR,iBACZ,CAFN,CAGI,CATR","names":["class","_createElementBlock","_createElementVNode","_Fragment","_renderList","_ctx","message","key","id","isUserMessage","text","$event","onKeydown","placeholder"],"sourceRoot":"","sources":["E:\\Github\\blog\\aurora-vue\\aurora-blog\\src\\components\\ChatGpt\\src\\ChatGpt.vue"],"sourcesContent":["<template>\r\n<div class=\"chat-container\">\r\n    <div class=\"chat-messages\">\r\n      <div v-for=\"message in messages\" :key=\"message.id\" :class=\"{ 'user-message': message.isUserMessage, 'bot-message': !message.isUserMessage }\">\r\n        {{ message.text }}\r\n      </div>\r\n    </div>\r\n    <div class=\"chat-input\">\r\n      <input v-model=\"inputText\" @keydown.enter=\"sendMessage\" placeholder=\"Type your message...\" />\r\n    </div>\r\n  </div>\r\n</template>"]},"metadata":{},"sourceType":"module"}