{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nclass EasyTyper {\n  constructor(obj, input, fn, hooks) {\n    checkKeyIsNull(obj);\n    checkFieldIsError(obj);\n    this.obj = obj;\n    this.input = typeof input === 'string' ? [input] : input;\n    this.fn = typeof fn === 'function' ? fn : function () {};\n    this.hooks = typeof hooks === 'function' ? hooks : function () {};\n    this.timer = 0;\n    this.typeAction = {\n      rollback: this.typedBack.bind(this),\n      normal: this.play.bind(this),\n      custom: this.fn\n    }; // 实例化完后立即执行打字输出\n\n    this.init();\n  } // 初始化\n\n\n  init() {\n    this.play();\n  } // 打字\n\n\n  play() {\n    if (!this.input.length) return this.fn(this);\n    let i = 0,\n        stop = false,\n        input = this.input.shift() || '';\n    this.timer = setInterval(() => {\n      if (i === input.length) {\n        i = 0;\n        stop = true;\n        this.closeTimer();\n      }\n\n      if (this.obj.isEnd) return this.closeTimer();\n      if (stop) return this.nextTick();\n      this.obj.output = input.slice(0, i + 1);\n      this.hooks(input.slice(0, i + 1), this);\n      i++;\n    }, this.obj.speed);\n  } // 回滚方法\n\n\n  typedBack() {\n    // 如果句子出书完毕，且是句子暂停模式\n    if (!this.input.length && this.obj.sentencePause) return this.fn(this);\n    let input = this.obj.output;\n    let i = input.length,\n        stop = false;\n    this.timer = setInterval(() => {\n      if (i === -1) {\n        this.obj.output = '';\n        this.hooks('', this);\n        i = 0;\n        stop = true;\n        this.closeTimer();\n      }\n\n      if (this.obj.isEnd) {\n        this.closeTimer();\n        return this.obj.singleBack = false;\n      }\n\n      if (stop) {\n        this.obj.singleBack = false;\n        return (() => {\n          const {\n            length\n          } = this.input;\n          return length ? this.play() : this.fn(this);\n        })();\n      }\n\n      this.obj.output = input.slice(0, i + 1);\n      this.hooks(input.slice(0, i + 1), this);\n      i--;\n    }, this.obj.backSpeed);\n  } // 下一次触发方式\n\n\n  nextTick() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // 等待\n      yield this.sleep(this.obj.sleep);\n      return this.obj.singleBack ? this.typedBack() : this.getOutputType();\n    });\n  } // 输出方式\n\n\n  getOutputType() {\n    return this.typeAction[this.obj.type](this);\n  } // 关闭定时器\n\n\n  closeTimer() {\n    clearInterval(this.timer);\n  } // 线程等待\n\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  } // 结束\n\n\n  close() {\n    return this.obj.isEnd = true;\n  }\n\n} // 错误提示语\n\n\nconst errorTip = message => {\n  throw new Error(message);\n}; // 校验参数完整性\n\n\nconst checkKeyIsNull = obj => {\n  const props = {\n    output: '',\n    type: '',\n    isEnd: false,\n    speed: 80,\n    backSpeed: 40,\n    sleep: 3000,\n    singleBack: false,\n    sentencePause: false\n  };\n  const propsKeys = Object.keys(props);\n  const objKeys = Object.keys(obj);\n\n  if (propsKeys.length !== objKeys.length) {\n    errorTip('配置对象错误: 字段数量不正确！');\n  }\n\n  propsKeys.forEach(key => {\n    if (obj[key] === undefined || obj[key] === null) {\n      errorTip('配置对象错误：字段值为null或undefined！');\n    }\n  });\n}; // 检验参数类型\n\n\nconst checkFieldIsError = obj => {\n  Object.keys(obj).forEach(key => {\n    const proxy = EasyTyperStrategy[key](obj);\n\n    if (proxy.check()) {\n      proxy.showTip(key);\n    }\n  });\n}; // 策略分发\n\n\nconst EasyTyperStrategy = (() => ({\n  output: obj => {\n    return new CheckField(`string`, obj.output);\n  },\n  type: obj => {\n    return new CheckField(`string`, obj.type);\n  },\n  isEnd: obj => {\n    return new CheckField(`boolean`, obj.isEnd);\n  },\n  speed: obj => {\n    return new CheckField(`number`, obj.speed);\n  },\n  backSpeed: obj => {\n    return new CheckField(`number`, obj.backSpeed);\n  },\n  sleep: obj => {\n    return new CheckField(`number`, obj.sleep);\n  },\n  singleBack: obj => {\n    return new CheckField(`boolean`, obj.singleBack);\n  },\n  sentencePause: obj => {\n    return new CheckField(`boolean`, obj.sentencePause);\n  }\n}))(); // 字段校验类\n\n\nclass CheckField {\n  constructor(type, field) {\n    this.type = type;\n    this.field = field;\n  }\n\n  check() {\n    return typeof this.field !== `${this.type}`;\n  }\n\n  showTip(name) {\n    errorTip(`配置对象错误：属性 ${name} 必须为 ${this.type} 类型！`);\n  }\n\n}\n\nexport default EasyTyper;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","EasyTyper","constructor","obj","input","fn","hooks","checkKeyIsNull","checkFieldIsError","timer","typeAction","rollback","typedBack","bind","normal","play","custom","init","length","i","stop","shift","setInterval","closeTimer","isEnd","nextTick","output","slice","speed","sentencePause","singleBack","backSpeed","sleep","getOutputType","type","clearInterval","ms","setTimeout","close","errorTip","message","Error","props","propsKeys","Object","keys","objKeys","forEach","key","undefined","proxy","EasyTyperStrategy","check","showTip","CheckField","field","name"],"sources":["D:/MyJavaproject/wusuowei/wusuowei-blog/node_modules/easy-typer-js/src/lib/index.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass EasyTyper {\r\n    constructor(obj, input, fn, hooks) {\r\n        checkKeyIsNull(obj);\r\n        checkFieldIsError(obj);\r\n        this.obj = obj;\r\n        this.input = typeof input === 'string' ? [input] : input;\r\n        this.fn = typeof fn === 'function' ? fn : function () { };\r\n        this.hooks = typeof hooks === 'function' ? hooks : function () { };\r\n        this.timer = 0;\r\n        this.typeAction = {\r\n            rollback: this.typedBack.bind(this),\r\n            normal: this.play.bind(this),\r\n            custom: this.fn\r\n        };\r\n        // 实例化完后立即执行打字输出\r\n        this.init();\r\n    }\r\n    // 初始化\r\n    init() {\r\n        this.play();\r\n    }\r\n    // 打字\r\n    play() {\r\n        if (!this.input.length)\r\n            return this.fn(this);\r\n        let i = 0, stop = false, input = this.input.shift() || '';\r\n        this.timer = setInterval(() => {\r\n            if (i === input.length) {\r\n                i = 0;\r\n                stop = true;\r\n                this.closeTimer();\r\n            }\r\n            if (this.obj.isEnd)\r\n                return this.closeTimer();\r\n            if (stop)\r\n                return this.nextTick();\r\n            this.obj.output = input.slice(0, i + 1);\r\n            this.hooks(input.slice(0, i + 1), this);\r\n            i++;\r\n        }, this.obj.speed);\r\n    }\r\n    // 回滚方法\r\n    typedBack() {\r\n        // 如果句子出书完毕，且是句子暂停模式\r\n        if (!this.input.length && this.obj.sentencePause)\r\n            return this.fn(this);\r\n        let input = this.obj.output;\r\n        let i = input.length, stop = false;\r\n        this.timer = setInterval(() => {\r\n            if (i === -1) {\r\n                this.obj.output = '';\r\n                this.hooks('', this);\r\n                i = 0;\r\n                stop = true;\r\n                this.closeTimer();\r\n            }\r\n            if (this.obj.isEnd) {\r\n                this.closeTimer();\r\n                return this.obj.singleBack = false;\r\n            }\r\n            if (stop) {\r\n                this.obj.singleBack = false;\r\n                return (() => {\r\n                    const { length } = this.input;\r\n                    return length ? this.play() : this.fn(this);\r\n                })();\r\n            }\r\n            this.obj.output = input.slice(0, i + 1);\r\n            this.hooks(input.slice(0, i + 1), this);\r\n            i--;\r\n        }, this.obj.backSpeed);\r\n    }\r\n    // 下一次触发方式\r\n    nextTick() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // 等待\r\n            yield this.sleep(this.obj.sleep);\r\n            return this.obj.singleBack ? this.typedBack() : this.getOutputType();\r\n        });\r\n    }\r\n    // 输出方式\r\n    getOutputType() {\r\n        return this.typeAction[this.obj.type](this);\r\n    }\r\n    // 关闭定时器\r\n    closeTimer() {\r\n        clearInterval(this.timer);\r\n    }\r\n    // 线程等待\r\n    sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n    // 结束\r\n    close() {\r\n        return this.obj.isEnd = true;\r\n    }\r\n}\r\n// 错误提示语\r\nconst errorTip = (message) => {\r\n    throw new Error(message);\r\n};\r\n// 校验参数完整性\r\nconst checkKeyIsNull = (obj) => {\r\n    const props = {\r\n        output: '',\r\n        type: '',\r\n        isEnd: false,\r\n        speed: 80,\r\n        backSpeed: 40,\r\n        sleep: 3000,\r\n        singleBack: false,\r\n        sentencePause: false\r\n    };\r\n    const propsKeys = Object.keys(props);\r\n    const objKeys = Object.keys(obj);\r\n    if (propsKeys.length !== objKeys.length) {\r\n        errorTip('配置对象错误: 字段数量不正确！');\r\n    }\r\n    propsKeys.forEach(key => {\r\n        if (obj[key] === undefined || obj[key] === null) {\r\n            errorTip('配置对象错误：字段值为null或undefined！');\r\n        }\r\n    });\r\n};\r\n// 检验参数类型\r\nconst checkFieldIsError = (obj) => {\r\n    Object.keys(obj).forEach(key => {\r\n        const proxy = EasyTyperStrategy[key](obj);\r\n        if (proxy.check()) {\r\n            proxy.showTip(key);\r\n        }\r\n    });\r\n};\r\n// 策略分发\r\nconst EasyTyperStrategy = (() => ({\r\n    output: (obj) => {\r\n        return new CheckField(`string`, obj.output);\r\n    },\r\n    type: (obj) => {\r\n        return new CheckField(`string`, obj.type);\r\n    },\r\n    isEnd: (obj) => {\r\n        return new CheckField(`boolean`, obj.isEnd);\r\n    },\r\n    speed: (obj) => {\r\n        return new CheckField(`number`, obj.speed);\r\n    },\r\n    backSpeed: (obj) => {\r\n        return new CheckField(`number`, obj.backSpeed);\r\n    },\r\n    sleep: (obj) => {\r\n        return new CheckField(`number`, obj.sleep);\r\n    },\r\n    singleBack: (obj) => {\r\n        return new CheckField(`boolean`, obj.singleBack);\r\n    },\r\n    sentencePause: (obj) => {\r\n        return new CheckField(`boolean`, obj.sentencePause);\r\n    },\r\n}))();\r\n// 字段校验类\r\nclass CheckField {\r\n    constructor(type, field) {\r\n        this.type = type;\r\n        this.field = field;\r\n    }\r\n    check() {\r\n        return typeof this.field !== `${this.type}`;\r\n    }\r\n    showTip(name) {\r\n        errorTip(`配置对象错误：属性 ${name} 必须为 ${this.type} 类型！`);\r\n    }\r\n}\r\nexport default EasyTyper;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}